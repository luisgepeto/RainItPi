@using System.Collections.Concurrent
@using Newtonsoft.Json
@using RainIt.Domain.DTO
@using Web.RainIt.Models
@model Web.RainIt.Models.Account.RegistrationModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Register";
}
<link href="~/Content/loginstyle.css" rel="stylesheet"/>
<style>
    .form-signin {
  max-width: 500px;
}
    input, select, textarea {
        max-width: 500px;
    }

    body {
        background-color: #000000;
        background-color: rgba(0, 0, 0, 0.2);
    }
</style>
@{
    var message = TempData["StatusMessage"] as StatusMessage;
    if (message != null)
    {
        <div id="statusMessage" class="@(message.IsError ? "error-status-message" : "valid-status-message")">
            @message.Message
        </div>
    }
}
<div class="container">
    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @id = "registerForm", @onsubmit = "RegisterProperties.Form.Validate()" }))
    {
        <div col="col-md-12" class="form-signin">
            <h4>Credentials</h4>
            @Html.LabelFor(m => m.Registration.User.Email, new {@class = "sr-only"})
            @Html.TextBoxFor(m => m.Registration.User.Email, new {@placeholder = "Email address", @class = "form-control intermediate-form-field"})
            @Html.ValidationMessageFor(model => model.Registration.User.Email)

            @Html.LabelFor(m => m.Registration.User.Username, new {@class = "sr-only"})
            @Html.TextBoxFor(m => m.Registration.User.Username, new {@placeholder = "Username", @class = "form-control intermediate-form-field"})
            @Html.ValidationMessageFor(model => model.Registration.User.Username)

            @Html.LabelFor(m => m.Registration.User.Password, new {@class = "sr-only"})
            @Html.TextBoxFor(m => m.Registration.User.Password, new {@placeholder = "Password", @class = "form-control intermediate-form-field", @type = "password"})
            @Html.ValidationMessageFor(model => model.Registration.User.Password)

            @Html.LabelFor(m => m.Registration.User.PasswordConfirmation, new {@class = "sr-only"})
            @Html.TextBoxFor(m => m.Registration.User.PasswordConfirmation, new {@placeholder = "Confirm your password", @class = "form-control last-form-field", @type = "password"})
            @Html.ValidationMessageFor(model => model.Registration.User.PasswordConfirmation)
        </div>
        <div col="col-md-12" class="form-signin">
            <h4>Device Information</h4>
            @Html.LabelFor(m => m.Registration.DeviceInfo.Identifier, new { @class = "sr-only" })
            @Html.TextBoxFor(m => m.Registration.DeviceInfo.Identifier, new { @placeholder = "Device identifier", @class = "form-control intermediate-form-field" })
            @Html.ValidationMessageFor(model => model.Registration.DeviceInfo.Identifier)
        </div>
    <div col="col-md-12" class="form-signin">
        <h4>Personal Information</h4>
        @Html.LabelFor(m => m.Registration.UserInfo.FirstName, new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.Registration.UserInfo.FirstName, new { @placeholder = "First name", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.UserInfo.FirstName)

        @Html.LabelFor(m => m.Registration.UserInfo.LastName, new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.Registration.UserInfo.LastName, new { @placeholder = "Last name", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.UserInfo.LastName)

        @Html.LabelFor(m => m.Registration.UserInfo.BirthDate, new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.Registration.UserInfo.BirthDate, new { @placeholder = "Birth date", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.UserInfo.BirthDate)

        @Html.LabelFor(m => m.Registration.UserInfo.Gender, new { @class = "sr-only" })
        @Html.DropDownListFor(m => m.Registration.UserInfo.Gender, Model.GenderList, new { @placeholder = "Gender", @class = "form-control last-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.UserInfo.Gender)
    </div>
    <div col="col-md-12" class="form-signin">
        <h4>Contact Information</h4>
        @Html.LabelFor(m => m.Registration.Address.AddressLine1, new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.Registration.Address.AddressLine1, new { @placeholder = "Address Line 1", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.Address.AddressLine1)

        @Html.LabelFor(m => m.Registration.Address.AddressLine2, new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.Registration.Address.AddressLine2, new { @placeholder = "Address Line 2", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.Address.AddressLine2)

        @Html.LabelFor(m => m.Registration.Address.City, new { @class = "sr-only" })
        @Html.DropDownListFor(m => m.Registration.Address.City, Model.CityList, new { @placeholder = "City", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.Address.City)

        @Html.LabelFor(m => m.Registration.Address.State, new { @class = "sr-only" })
        @Html.DropDownListFor(m => m.Registration.Address.State, Model.StateList, new { @placeholder = "Address Line 2", @class = "form-control intermediate-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.Address.State)

        @Html.LabelFor(m => m.Registration.Address.Country, new { @class = "sr-only" })
        @Html.DropDownListFor(m => m.Registration.Address.Country, Model.CountryList, new { @placeholder = "Address Line 2", @class = "form-control last-form-field" })
        @Html.ValidationMessageFor(model => model.Registration.Address.Country)
        <button class="btn btn-lg btn-primary btn-block" type="submit" name="register" value="register">Register</button>
    </div>
        
    }
</div>       

@section Scripts{
    <script type="text/javascript">
        (function() {
            this.RegisterProperties = this.RegisterProperties || {};
            RegisterProperties.Form = (function() {
                var properties = {};
                properties.Validate = function () {
                    return $('#registerForm').validate();
                }
                return properties;
            }());

            var datePicker = (function() {
                var properties = {};
                properties.Initialize = function () {
                    $('#Registration_UserInfo_BirthDate').datepicker();
                }
                return properties;
            }());

            RegisterProperties.SetupPage = function() {
                datePicker.Initialize();
            };
        }());
        $(document).ready(function() {
            RegisterProperties.SetupPage();
        });
    </script>
}
