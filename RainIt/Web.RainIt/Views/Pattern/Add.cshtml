@using RainIt.Domain.DTO

@using Web.RainIt.Models
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Add Pattern";
}

<link href="~/Content/loginstyle.css" rel="stylesheet"/>
<style>
       .form-signin {
  max-width: 800px;
}
    input, select, textarea {
        max-width: 800px;
    }

    body {
        background-color: #000000;
        background-color: rgba(0, 0, 0, 0.2);
    }
</style>
@{
    var message = TempData["StatusMessage"] as StatusMessage;
    if (message != null)
    {
        <div id="statusMessage" style="color: @(message.IsError ? "red" : "green")">
            @message.Message
        </div>
    }
}
<div class="container" style="margin-top: 50px;">
    <div col="col-md-12 container" class="form-signin">
        <input type="file" class=" btn btn-lg btn-primary btn-block" id="filePicker" />
        <div col="col-md-3"><img id="imagePreview" src=""/>
        </div>
        <div col="col-md-3"><img id="grayscaleImagePreview" src=""/>
        </div>
        <div col="col-md-3"><img id="blackWhitePreview" src=""/>
        </div>
    </div>
    <div col="col-md-12" class="form-signin">
        <h4>RGB Settings</h4>
        @Html.JQueryUI().Slider("RWeight", 50).ContainerCssClass("form-control intermediate-form-field")
        @Html.JQueryUI().Slider("GWeight", 50).ContainerCssClass("form-control intermediate-form-field")
        @Html.JQueryUI().Slider("BWeight", 50).ContainerCssClass("form-control last-form-field")
    </div>
    <div col="col-md-12" class="form-signin">
        <h4>B/W Settings</h4>
        @Html.JQueryUI().Slider("Threshold", 50).ContainerCssClass("form-control last-form-field")
        @Html.CheckBox("IsInverted") Invert
        @using (Html.BeginForm("Add", "Pattern", FormMethod.Post))
        {
            @Html.Hidden("fileName", "")
            @Html.Hidden("base64Image", "")
            <button class="btn btn-lg btn-primary btn-block alternate-button" type="submit" name="add" id="Add" value="add">Add</button>
        }
    </div>
</div>
<script type="text/javascript">
        (function () {
            this.AddPatternProperties = this.AddPatternProperties || {};

            AddPatternProperties.ImageTransformer = (function () {
                var properties = {};
                function onAjaxSuccess(data) {
                    if (data.hasOwnProperty("grayScaleFile")) {
                        $('#grayscaleImagePreview').attr("src", "data:image/png;base64," + data.grayScaleFile);
                    }
                    if (data.hasOwnProperty("blackWhiteFile")) {
                        $('#blackWhitePreview').attr("src", "data:image/png;base64," + data.blackWhiteFile);
                        $('#base64Image').val(data.blackWhiteFile);
                    } 
                }

                function makeTransformAjaxCall(url, imageData) {
                    $.ajax({
                        url: url,
                        data: { base64Image: imageData },
                        type: "POST",
                        contentType: "application/x-www-form-urlencoded",
                        success: onAjaxSuccess
                    });
                }

                properties.GetGrayScale = function () {
                    var url = '@Url.Action("GetGrayScaleFor", "Pattern")' + "?colorRelativeWeight.RWeight=-1&colorRelativeWeight.GWeight=-2&colorRelativeWeight.BWeight=-3";
                    url = url.replace("-1", $('#RWeight').val());
                    url = url.replace("-2", $('#GWeight').val());
                    url = url.replace("-3", $('#BWeight').val());
                    var imageData = $('#imagePreview').attr('src');
                    var base64Start = imageData.indexOf("base64,");
                    imageData = imageData.slice(base64Start + 7);
                    makeTransformAjaxCall(url, imageData);
                }

                properties.GetBlackWhite = function () {
                    var url = '@Url.Action("GetBlackWhiteFor", "Pattern")' + "?isInverted=-1&thresholdPercentage=-2";
                    url = url.replace("-1", $('#IsInverted').is(":checked"));
                    url = url.replace("-2", ($('#Threshold').val() == "" ? 0 : $('#Threshold').val()));
                    var imageData = $('#grayscaleImagePreview').attr('src');
                    var base64Start = imageData.indexOf("base64,");
                    imageData = imageData.slice(base64Start + 7);
                    makeTransformAjaxCall(url, imageData);
                }

                return properties;
            }());

            var isInvertedControl = (function () {
                var properties = {};
                properties.AddChangeListener = function () {
                    $('#IsInverted').change(function () {
                        AddPatternProperties.ImageTransformer.GetBlackWhite();
                    });
                }
                return properties;
            }());

            var grayImageHolder = (function () {
                var properties = {};
                properties.AddLoadListener = function () {
                    $('#grayscaleImagePreview').on('load', function () {
                        AddPatternProperties.ImageTransformer.GetBlackWhite();
                    });
                }
                return properties;
            }());

            var normalImageHolder = (function () {
                var properties = {};
                properties.AddLoadListener = function () {
                    $('#imagePreview').on('load', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                }
                return properties;
            }());

            var filePicker = (function () {
                var properties = {};
                function updateImageHolder(input) {
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $('#imagePreview').attr('src', e.target.result);
                        }
                        reader.readAsDataURL(input.files[0]);
                    }
                }
                properties.AddChangeListener = function () {
                    $("#filePicker").change(function () {
                        var fileName = $(this).val().split('\\').pop();
                        $('#fileName').val(fileName);
                        updateImageHolder(this);
                    });
                }
                return properties;
            }());

            var slider = (function() {
                var properties = {};
                properties.AddChangeListener = function () {
                    $('#RWeight').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                    $('#GWeight').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                    $('#BWeight').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                    $('#Threshold').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetBlackWhite();
                    });
                }
                return properties;
            }());

            AddPatternProperties.SetupPage = function () {
                filePicker.AddChangeListener();
                normalImageHolder.AddLoadListener();
                grayImageHolder.AddLoadListener();
                slider.AddChangeListener();
                isInvertedControl.AddChangeListener();
            }
        }());

        $(document).ready(function () {
            AddPatternProperties.SetupPage();
        });
    </script>
