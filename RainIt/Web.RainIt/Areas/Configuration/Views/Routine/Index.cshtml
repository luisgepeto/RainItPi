@model List<RainIt.Domain.DTO.RoutineDTO>

<div class="container">
    @foreach (var routine in Model)
    {
        <div class="row">
            <div class="col-md-12">
                @Html.Action("View", "Routine", new { area = "Configuration", routineId = routine.RoutineId })
            </div>
        </div>
    }
    <div class="row">

    </div>
    @using (Html.BeginForm("Add", "Routine", new {area = "Configuration"}, FormMethod.Get))
    {
        <button name="addRoutine" value="addRoutine" id="addRoutineButton" class="btn btn-primary">Add Routine</button>
    }
    @Html.Partial("_Modal")
    @using (Html.BeginForm("Edit", "Routine", new {area = "Configuration"}, FormMethod.Get, new {id="editRoutineForm"}))
    {
        @Html.Hidden("routineId", "")
    }
</div>
@section scripts{
    <script type="text/javascript">
    (function() {
        this.RoutineIndexProperties = this.RoutineIndexProperties || {};

        var scroller = (function() {
            var properties = {};
            function addClickListener() {
                $('.routine-holder ul').addClass("pointer");
                $('.routine-holder ul').click(function (e) {
                    var routineId = $(e.currentTarget).closest('.routine-holder').attr("data-routine-id");
                    $('#routineId').val(routineId);
                    $('#editRoutineForm').submit();
                });
            }
            properties.Initialize = function() {
                addClickListener();
            }
            return properties;
        }());

            var deleteButton = (function() {
                var properties = {};

                function onAjaxSuccess(data) {
                    window.location.href = data;
                }

                function makeDeleteAjaxCall(routineToDelete) {
                    $.post(
                        "@Url.Action("Delete", "Routine", new {area = "Configuration"}, null)",
                        { routineId: routineToDelete },
                        onAjaxSuccess
                    );
                }

                
                function addClickListener() {
                    $('.delete-button').click(function (e) {
                        var currentDeleteButton = $(e.currentTarget);
                        var id = currentDeleteButton.parent().attr('data-routine-id');
                        var longModalContent = currentDeleteButton.siblings('div').find('ul').clone(true).off('click').removeClass().removeAttr("id").removeAttr("style");
                        longModalContent.children().each(function () {
                            $(this).removeClass().addClass("limit-view routine-element");
                        });
                        var myDiv = $('<div>').css("overflow", "auto").css("width", "100%").css("height", "auto").addClass("routine-holder");
                        longModalContent.appendTo(myDiv);
                        var parameters = {
                            ButtonName: "Delete",
                            Message: "Are you sure you want to delete this item?<br />This action cannot be undone.",
                            LongModalContent: myDiv
                        };
                        ModalDeleteProperties.Initialize(parameters, makeDeleteAjaxCall, id);
                        ModalDeleteProperties.Show(function () {
                            $('#longModalContent').find('.routine-holder').mThumbnailScroller({
                                axis: 'x',
                                type: 'hover-90',
                                speed: 30
                            });
                        });
                    });
                }
                function addToRoutineHolder() {
                    var deleteButton = $('<div>').addClass("delete-button pointer");
                    $('.routine-holder').prepend(deleteButton);
                }
                properties.Initialize = function () {
                    addToRoutineHolder();
                    addClickListener();
                }
                return properties;
            }());

            RoutineIndexProperties.SetupPage = function() {
                scroller.Initialize();
                deleteButton.Initialize();
            }
        }());
        $(document).ready(function() {
            RoutineIndexProperties.SetupPage();
        });
    </script>
}