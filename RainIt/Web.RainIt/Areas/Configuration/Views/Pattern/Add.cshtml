@using JQueryUIHelpers
@using RainIt.Domain.DTO

@using Web.RainIt.Models
@{
    ViewBag.Title = "Add Pattern";
}
<script src="~/Scripts/fileinput.js"></script>
<link href="~/Content/fileinput.css" rel="stylesheet"/>
<style>
    /* This will solve the problem about the file upload displaying incorrectly*/
     .form-control {
         padding: 0px 12px;
     }
     /* This will bundle the input groups together*/
     .container  .input-group:not(:first-of-type) .input-group-addon, .container .input-group:not(:first-of-type) .form-control {
         -ms-border-top-left-radius: 0;
         border-top-left-radius: 0;
         -ms-border-top-right-radius: 0;
         border-top-right-radius: 0;
         border-top: none;
     }

     .container .input-group:not(:last-of-type) .input-group-addon, .container .input-group:not(:last-of-type) .form-control {
         -ms-border-bottom-left-radius: 0;
         border-bottom-left-radius: 0;
         -ms-border-bottom-right-radius: 0;
         border-bottom-right-radius: 0;
         border-bottom: none;
     }

     /* This will disable the spinner buttons that break the layout*/
     .ui-spinner a.ui-spinner-button {
         display: none;
     }

     /*This will limit this page column to a maximum height*/
     .limit {
        width: 100%;
        height: 500px;
        max-height:500px;
        overflow:hidden;  
    }
     .limit img {
         width: auto;
         max-width: 100%;
         max-height: 100%;
     }

     /* This will set the slider background color*/
     div[data-jqui-slider-names='RWeight'] .ui-slider-range {
         background: red;
     }
     div[data-jqui-slider-names='GWeight'] .ui-slider-range {
         background: green;
     }
     div[data-jqui-slider-names='BWeight'] .ui-slider-range {
         background: blue;
     }
     div[data-jqui-slider-names='Threshold'] .ui-slider-range {
         background: black;
     }
</style>
@{
    var message = TempData["StatusMessage"] as StatusMessage;
    if (message != null)
    {
        <div id="statusMessage" style="color: @(message.IsError ? "red" : "green")">
            @message.Message
        </div>
    }
}
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="row">
                <div id="transformation-settings" class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Transformation Settings</h3>
                    </div>
                    <div class="panel-body">
                        <div class="input-group">
                            <label for="rWeight" class="input-group-addon">
                                <span class="glyphicon glyphicon-tint red" aria-hidden="true"></span>
                                <span class="sr-only">R Weight:</span>
                            </label>
                            <div class="form-control">
                                @Html.JQueryUI().Slider("RWeight", 50).Range(SliderRange.Min)
                            </div>
                            <span class="input-group-addon">%</span>
                        </div>
                        <div class="input-group">
                            <label for="gWeight" class="input-group-addon">
                                <span class="glyphicon glyphicon-tint green" aria-hidden="true"></span>
                                <span class="sr-only">G Weight:</span>
                            </label>
                            <div class="form-control">
                                @Html.JQueryUI().Slider("GWeight", 50).Range(SliderRange.Min)
                            </div>
                            <span class="input-group-addon">%</span>
                        </div>
                        <div class="input-group">
                            <label for="bWeight" class="input-group-addon">
                                <span class="glyphicon glyphicon-tint blue" aria-hidden="true"></span>
                                <span class="sr-only">B Weight:</span>
                            </label>
                            <div class="form-control">
                                @Html.JQueryUI().Slider("BWeight", 50).Range(SliderRange.Min)
                            </div>
                            <span class="input-group-addon">%</span>
                        </div>
                        <div class="input-group">
                            <label for="threshold" class="input-group-addon">
                                <span class="glyphicon glyphicon-adjust" aria-hidden="true"></span>
                                <span class="sr-only">BW Threshold:</span>
                            </label>
                            <div class="form-control">
                                @Html.JQueryUI().Slider("Threshold", 50).Range(SliderRange.Min)
                            </div>
                            <span class="input-group-addon">%</span>
                        </div>
                        @*<div class="btn-group" data-toggle="buttons" style="max-height: 20px; width: 100%;">
                            <label class="btn btn-default">
                                @Html.CheckBox("IsInverted") <img src="../../../../Content/invert.png" style="max-height: 20px;"/>
                            </label>
                        </div>*@
                    </div>
                </div>
                <div id="image-details" class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Image Details</h3>
                    </div>
                    <div class="panel-body">
                        <div class="input-group">
                            <label for="threshold" class="input-group-addon">
                                <span class="glyphicon glyphicon-font" aria-hidden="true"></span>
                                <span class="sr-only">Name:</span>
                            </label>
                            <div class="form-control">
                                <input type="text" id="fileNameDisplay"/>
                            </div>
                        </div>
                        <div class="input-group">
                            <label for="threshold" class="input-group-addon">
                                <span class="glyphicon glyphicon-resize-horizontal" aria-hidden="true"></span>
                                <span class="sr-only">New Width:</span>
                            </label>
                            <div class="form-control">
                                @Html.JQueryUI().Spinner("Width")
                            </div>
                            <span class="input-group-addon">px</span>
                        </div>
                        <div class="input-group">
                            <label for="threshold" class="input-group-addon">
                                <span class="glyphicon glyphicon-resize-vertical" aria-hidden="true"></span>
                                <span class="sr-only">New Height:</span>
                            </label>
                            <div class="form-control">
                                @Html.JQueryUI().Spinner("Height")
                            </div>
                            <span class="input-group-addon">px</span>
                        </div>
                        <div class="btn-group" data-toggle="buttons" style="max-height: 20px; width: 100%;">
                            <label class="btn btn-default">
                                @Html.CheckBox("IsProportional")
                                <span class="glyphicon glyphicon-fullscreen" aria-hidden="true"></span>
                                <span class="sr-only">Is Proportional:</span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <input type="file" id="filePicker"/>
                <button type="submit" name="add" id="Add" value="add" class="btn btn-success" disabled="disabled">Add</button>@Html.Raw(" ")
                <button type="submit" name="cancel" id="Cancel" value="cancel" class="btn btn-danger">Cancel</button>
                @using (Html.BeginForm("Index", "Pattern", new {area = "Configuration"}, FormMethod.Get, new {@style = "display:none;", @id = "cancelForm"}))
                {
                }
            </div>
        </div>
        <div class="col-md-8">
            <div id="img-preview" class="container">
                <div class="row">
                    <div class="col-md-4 col-xs-4">
                        <div class="limit">
                            <img id="imagePreview" src=""  />    
                        </div>
                    </div>
                    <div class="col-md-4 col-xs-4">
                        <div class="limit">
                            <img id="grayscaleImagePreview" src="" />
                        </div>
                    </div>
                    <div class="col-md-4 col-xs-4">
                        <div class="limit">
                            <img id="blackWhitePreview" src="" />    
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Html.Hidden("originalWidth", "")
@Html.Hidden("originalHeight", "")
@Html.Hidden("originalImage", "")
<script type="text/javascript">
        (function () {
            this.AddPatternProperties = this.AddPatternProperties || {};

            AddPatternProperties.ImageTransformer = (function () {
                var properties = {};
                function onAjaxSuccess(data) {
                    if (data.hasOwnProperty("grayScaleFile")) {
                        $('#grayscaleImagePreview').attr("src", "data:image/png;base64," + data.grayScaleFile);
                    }
                    if (data.hasOwnProperty("blackWhiteFile")) {
                        slider.EnableAll();
                        isInvertedControl.Enable();
                        resizeControls.EnableAll();
                        $('#blackWhitePreview').attr("src", "data:image/png;base64," + data.blackWhiteFile);
                        $('#base64Image').val(data.blackWhiteFile);
                    } 
                }

                function makeTransformAjaxCall(url, imageData) {
                    $.ajax({
                        url: url,
                        data: { base64Image: imageData },
                        type: "POST",
                        contentType: "application/x-www-form-urlencoded",
                        success: onAjaxSuccess
                    });
                }

                properties.GetGrayScale = function () {
                    $('#Add').attr('disabled', 'disabled');
                    slider.DisableAll();
                    isInvertedControl.Disable();
                    resizeControls.DisableAll();
                    var url = '@Url.Action("GetGrayScaleFor", "Pattern", new { area = "Configuration" }, null)' + "?colorRelativeWeight.RWeight=-1&colorRelativeWeight.GWeight=-2&colorRelativeWeight.BWeight=-3";
                    url = url.replace("-1", $('#RWeight').val());
                    url = url.replace("-2", $('#GWeight').val());
                    url = url.replace("-3", $('#BWeight').val());
                    var imageData = $('#imagePreview').attr('src');
                    var base64Start = imageData.indexOf("base64,");
                    imageData = imageData.slice(base64Start + 7);
                    makeTransformAjaxCall(url, imageData);
                }

                properties.GetBlackWhite = function () {
                    $('#Add').attr('disabled', 'disabled');
                    slider.DisableAll();
                    isInvertedControl.Disable();
                    resizeControls.DisableAll();
                    var url = '@Url.Action("GetBlackWhiteFor", "Pattern", new { area = "Configuration" }, null)' + "?isInverted=-1&thresholdPercentage=-2";
                    url = url.replace("-1", $('#IsInverted').is(":checked"));
                    url = url.replace("-2", ($('#Threshold').val() == "" ? 0 : $('#Threshold').val()));
                    var imageData = $('#grayscaleImagePreview').attr('src');
                    var base64Start = imageData.indexOf("base64,");
                    imageData = imageData.slice(base64Start + 7);
                    makeTransformAjaxCall(url, imageData);
                }

                return properties;
            }());

            var isInvertedControl = (function () {
                var properties = {};
                properties.AddChangeListener = function () {
                    $('#IsInverted').change(function () {
                        AddPatternProperties.ImageTransformer.GetBlackWhite();
                    });
                }
                properties.Disable = function () {
                    $('#IsInverted').parent().attr('disabled', true);
                }
                properties.Enable = function () {
                    $('#IsInverted').parent().attr('disabled', false);
                }
                return properties;
            }());

            var blackImageHolder = (function() {
                var properties = {};
                properties.AddLoadListener = function() {
                    $('#blackWhitePreview').on('load', function () {
                        $('#Add').removeAttr('disabled');
                    });
                }
                return properties;
            }());

            var grayImageHolder = (function () {
                var properties = {};
                properties.AddLoadListener = function () {
                    $('#grayscaleImagePreview').on('load', function () {
                        AddPatternProperties.ImageTransformer.GetBlackWhite();
                    });
                }
                return properties;
            }());

            var normalImageHolder = (function () {
                var properties = {};
                properties.AddLoadListener = function () {
                    $('#imagePreview').on('load', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                }
                return properties;
            }());

            var resizeControls = (function () {
                var properties = {};
                function onAjaxSuccess(data) {
                    $('#imagePreview').attr('src', "data:image/png;base64,"+data.base64NewImage);
                    $('#Width').val(data.TargetWidth);
                    $('#Height').val(data.TargetHeight);
                }
                function makeAjaxCall(absoluteResizeParametersModel) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetResizedImage", "Pattern", new {area = "Configuration"})',
                        data: JSON.stringify(absoluteResizeParametersModel),
                        success: onAjaxSuccess,
                        contentType: "application/json",
                        dataType: "json"
                    });
                }
                function resizeImage(newWidth, newHeight) {
                    var isProportional = $('#IsProportional').is(':checked');
                    var absoluteResizeParametersModel = {
                        base64Image: $('#originalImage').val(),
                        AbsoluteResizeParametersModel: {
                            OriginalWidth: $('#originalWidth').val(),
                            OriginalHeight: $('#originalHeight').val(),
                            TargetWidth: !isProportional && newWidth == null ? $('#Width').val() : newWidth,
                            TargetHeight: !isProportional && newHeight == null ? $('#Height').val() : newHeight,
                            IsProportional: isProportional
                        }
                    };
                    makeAjaxCall(absoluteResizeParametersModel);
                }
                properties.SetParametersTo = function (newWidth, newHeight) {
                    $('#Width').val(newWidth);
                    $('#Height').val(newHeight);
                }
                function addSpinnerListener() {
                    $('#Height').parent().on('spinchange', function() {
                        resizeImage(null, $('#Height').val());
                    });
                    $('#Width').parent().on('spinchange', function () {
                        resizeImage($('#Width').val(), null);
                    });
                }

                function addCheckListener() {
                    $('#IsProportional').change(function () {
                        resizeImage($('#Width').val(), $('#Height').val());
                    });
                }

                properties.Initialize = function (width, height) {
                    $('#originalWidth').val(width);
                    $('#originalHeight').val(height);
                    $('#Width').val(width);
                    $('#Height').val(height);
                    addSpinnerListener();
                    addCheckListener();
                }

                properties.DisableAll = function() {
                    $('#Width').attr('disabled', true);
                    $('#Height').attr('disabled', true);
                    $('#fileNameDisplay').attr('disabled', true);
                    $('#IsProportional').parent().attr('disabled', true);
                }

                properties.EnableAll = function() {
                    $('#Width').attr('disabled', false);
                    $('#Height').attr('disabled', false);
                    $('#fileNameDisplay').attr('disabled', false);
                    $('#IsProportional').parent().attr('disabled', false);
                }
                return properties;
            }());

            var filePicker = (function () {
                var properties = {};
                function updateImageHolder(input) {
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function(e) {
                            $('#imagePreview').attr('src', e.target.result);
                            var imageData = e.target.result;
                            var base64Start = imageData.indexOf("base64,");
                            imageData = imageData.slice(base64Start + 7);
                            $('#originalImage').val(imageData);
                        }
                        reader.readAsDataURL(input.files[0]);
                    } else {
                        $('#originalImage').val("");
                        $('#imagePreview').attr('src', "");
                        $('#blackWhitePreview').attr('src', "");
                        $('#grayscaleImagePreview').attr('src', "");
                    }
                }

                function getImage(input) {
                    if (input.files && input.files[0]) {
                        var img = new Image();
                        var _URL = window.URL || window.webkitURL;
                        img.src = _URL.createObjectURL(input.files[0]);
                        return img;
                    }
                    return null;
                }

                properties.AddChangeListener = function () {
                    $("#filePicker").change(function () {
                        $('#Add').attr('disabled', 'disabled');
                        var fileName = $(this).val().split('\\').pop();
                        $('#fileNameDisplay').val(fileName);
                        updateImageHolder(this);
                        var image = getImage(this);
                        if (image != null) {
                            image.onload = function () {
                                resizeControls.Initialize(image.width, image.height);
                            }
                        } else {
                            resizeControls.Initialize(0, 0);
                        }
                    });
                }

                properties.Initialize = function() {
                    $("#filePicker").fileinput({
                        showPreview: false,
                        showRemove: false,
                        showUpload: false,
                        showCaption: false,
                        allowedFileTypes: ['image'],
                        allowedFileExtensions: ['jpg', 'gif', 'png']
                    });
                }
                return properties;
            }());

            var slider = (function() {
                var properties = {};
                properties.AddChangeListener = function () {
                    $('#RWeight').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                    $('#GWeight').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                    $('#BWeight').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetGrayScale();
                    });
                    $('#Threshold').parent().on('slidechange', function () {
                        AddPatternProperties.ImageTransformer.GetBlackWhite();
                    });
                }
                properties.RemoveDisplay = function() {
                    $('.ui-slider').parent().children('span').hide();
                }

                properties.DisableAll = function () {
                    //$('#RWeight').slider('disable');
                    //$('#GWeight').slider('disabled');
                    //$('#BWeight').slider('disabled');
                    //$('#Threshold').attr('disabled', true);
                }

                properties.EnableAll = function() {
                    //$('#RWeight').slider('enable');
                    //$('#GWeight').slider('enable');
                    //$('#BWeight').slider('enable');
                    //$('#Threshold').attr('disabled', false);
                }
                return properties;
            }());

            var button = (function() {
                var properties = {};
                properties.AddCancelClickListener = function () {
                    $('#Cancel').click(function() {
                        $('#cancelForm').submit();
                    });
                }

                function onAjaxSuccess(data) {
                    window.location.href = data;
                }

                function getImageData() {
                    var imageData = $('#blackWhitePreview').attr('src');
                    var base64Start = imageData.indexOf("base64,");
                    imageData = imageData.slice(base64Start + 7);
                    return imageData;
                }

                function getData() {
                    var data = {
                        PatternUploadModel: {
                            FileName: $('#fileNameDisplay').val(),
                            Base64Image: getImageData(),
                            AbsoluteResizeParameters: {
                                OriginalWidth: $('#originalWidth').val(),
                                OriginalHeight: $('#originalHeight').val(),
                                TargetWidth: $('#Width').val(),
                                TargetHeight: $('#Height').val(),
                                IsProportional: $('#IsProportional').is(":checked")
                            }
                        }
                    };
                    return data;
                }

                function makeSubmitAjaxCall() {
                    $.ajax({
                        url: '@Url.Action("Add", "Pattern", new{area ="Configuration"})',
                        data: getData(),
                        type: "POST",
                        contentType: "application/x-www-form-urlencoded",
                        success: onAjaxSuccess
                    });
                }

                properties.AddSubmitClickListener = function () {
                    $('#Add').click(function () {
                        makeSubmitAjaxCall();
                    });
                }
                return properties;
            }());
           

            AddPatternProperties.SetupPage = function () {
                filePicker.Initialize();
                filePicker.AddChangeListener();
                normalImageHolder.AddLoadListener();
                grayImageHolder.AddLoadListener();
                blackImageHolder.AddLoadListener();
                slider.AddChangeListener();
                slider.RemoveDisplay();
                isInvertedControl.AddChangeListener();
                button.AddCancelClickListener();
                button.AddSubmitClickListener();
            }
        }());

        $(document).ready(function () {
            AddPatternProperties.SetupPage();
        });
    </script>
